<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
								  xmlns:s="library://ns.adobe.com/flex/spark"
								  xmlns:mx="library://ns.adobe.com/flex/mx"
								  xmlns:analytics="com.google.analytics.components.*"								  
								  runtimeDPIProvider="com.zeusbase.CustomDPIProvider"
								  applicationDPI="160"								   
								  color="#004080" 
								  fontWeight="bold"								  
								  navigatorStateLoading="onRestoring(event)"
								  navigatorStateSaving="onPersisting(event)"
								  resize="resizeHandler(event)"		
								  persistNavigatorState="false"
								  splashScreenImage="@Embed(source='assets/startup/splash.png')"
								  splashScreenMinimumDisplayTime="1000"
								  splashScreenScaleMode="none"
								  applicationComplete="onApplicationComplete()" 								  
								  addedToStage="onComplete()">								  
	

	<!--  Extra App Attributes
								chromeColor="0x333333"
								destructionPolicy="never" 
								xmlns:baseSet="flexInc.examples.plastique.baseSet.*"
								splashScreenImage="@Embed('assets/startup/Default@2x.png')"
	-->
	
	<!-- Global Scripts
	**************************************************************************************************
	-->
	<fx:Script>
		<![CDATA[
			import air.net.URLMonitor;
			
			import com.zeusbase.*;
			import com.zeusbase.AppInfoObject;
			
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			protected var monitor:URLMonitor;
			import mx.events.ResizeEvent;
			
			public var appVersion:String = AppInfoObject.instance.version;
			public var googleAnalyticsId:String = AppInfoObject.instance.googleAnalyticsId;
			
			/**
			 * START OF GOOGLE ANALYTICS CODE
			 */ 
			import com.google.analytics.GATracker;
			import com.google.analytics.AnalyticsTracker;
			
			public var tracker:AnalyticsTracker;
			
			private function onComplete():void
			{
				//tracker = new GATracker( this, "UA-34910688-1", "AS3", false );
				
				trace('Google Analytics Id was set to ' + googleAnalyticsId);
				tracker = new GATracker( this, googleAnalyticsId, "AS3", false );
				
			}
			
			public function onLoginButtonClick():void
			{
				tracker.trackPageview("iView Mobile Login Clicked");
			
			}
			/**
			 * END OF GOOGLE ANALYTICS CODE
			 */ 
			
			
			// Update the applications state based on the orientation of the device
			protected function resizeHandler(event:ResizeEvent):void
			{
				currentState = aspectRatio;
			}
			
			
			protected function onApplicationComplete():void
			{
				trace('Google Analytics - initialized');
				tracker.trackPageview( "iView Mobile App Loaded" );
				trace('Google Analytics - tracking');
				
				
				
				/** @HYOKOS
				 *  HIDE the tabs at the bottom on launch and login views
				 *  Add a listener so that when the app is entered successfully the tabs are visible
				 * */
				//PipelineTabPanel.activeView.actionBarVisible=false;
				//PipelineTabPanel.activeView.tabBarVisible=false;
				//this.tabbedNavigator.addEventListener(IndexChangeEvent.CHANGE, onChange); 
				
				
				// Handle orientation change events if auto-orient is true
				if (stage.autoOrients)
				{
					this.stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, onOrientationChange);
				}
				
				// Request to be notified when the display state changes (minimized, maximized)
				addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onDisplayStateChange);
				
				// Request to be notified when this application is activated (brought forward as the active window)
				// or deactivated
				NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
				NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivate);
				
				// Invoke listener - request to be notified when the AIR app is invoked (started), this could occur from the command line, UI or
				// from opening an associated file
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);
				
				// Get notified whan a global error occurs
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onError);
				
				// Capture exiting event
				NativeApplication.nativeApplication.addEventListener(Event.EXITING,onAppExiting);
				
				// Detecting online/offline network connectivity with a URLMonitor
				monitor = new URLMonitor(new URLRequest("http://demo.iesltd.com"));
				monitor.addEventListener(StatusEvent.STATUS, onStatusChange);
				monitor.pollInterval = 20000;// Milliseconds
				monitor.start();
				trace("Do we have internet access");
				if (monitor.available) {
					trace("http://demo.iesltd.com - IS NOT NOT NOT ACCESSABLE");

				} else {
					trace("http://demo.iesltd.com - IS ACCESSABLE");
				}
				
				// Set the idle mode to KEEP AWAKE
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
				
			}
			
			protected function onChange(event:IndexChangeEvent):void
			{
				trace("Event called for onChange");
				if (event.newIndex==0){
					//PipelineTabPanel.activeView.actionBarVisible=false;
					//PipelineTabPanel.activeView.tabBarVisible=false;
					trace('Tab Bar set to NOT visible');
				}
				
			}	
			
			// Handle device orientation changes
			protected function onOrientationChange(event:StageOrientationEvent):void
			{
				trace("Orientation changed from " + event.beforeOrientation + " to " + event.afterOrientation);
				switch (event.afterOrientation)
				{
					case StageOrientation.DEFAULT:
						trace("Default orientation");
						break;
					case StageOrientation.ROTATED_RIGHT:
						trace("Rotated right");
						break;
					case StageOrientation.ROTATED_LEFT:
						trace("Rotated left");
						break;
					case StageOrientation.UPSIDE_DOWN:
						trace("Upside down");
						break;
					case StageOrientation.UNKNOWN:
						trace("Unknown");
						break;
				}
			}
			
			// The application display state has changed
			protected function onDisplayStateChange(e:NativeWindowDisplayStateEvent):void
			{
				trace("Display State Changed from " + e.beforeDisplayState + " to " + e.afterDisplayState);
			}
			
			// The application is now in the foreground and active, restore the frameRate to the default
			protected function onActivate(event:Event):void
			{
				trace("Handling application activate event");
				stage.frameRate=24; 
			}
			
			// Handle the application being sent to the background, garbage collect and lower frame rate to use less resources
			protected function onDeactivate(event:Event):void 
			{
				trace("Handling application deactivate event");
				System.gc();
				stage.frameRate=2;
			}
			
			// Called when application is first invoked
			protected function onInvoke(invokeEvt:InvokeEvent):void 
			{
				trace("Handling invoke event");
			}
			
			// Handle Global Errors
			
			protected function onError(e:UncaughtErrorEvent):void
			{
				e.preventDefault();
				trace("An error has occurred and been caught by the global error handler: " + e.error.toString(), "iView Global Error Handler");
			}
			
			
			// Called when application exits
			protected function onAppExiting(e:Event):void
			{
				trace("Handling application exit event");
			}
			
			// Handles when the HTTP Network status has changed.
			protected function onStatusChange(e:StatusEvent):void
			{
				if (monitor.available) 
				{
					trace("Internet is available");
				} else {
					trace("No Internet access currently available");
				}
			}
			
			// Called when application is about to persist data (can call cancel if this is not desired)
			protected function onPersisting(e:FlexEvent):void
			{
				trace("Handling persisting event");
			}
			
			// Called when application is about to restore data (can call cancel if this is not desired)
			protected function onRestoring(e:FlexEvent):void
			{
				trace("Handling restoring event");
			}
		
			protected function buttonClickLogout():void {
				trace("Logout Clicked - exiting application");
			}
		
		]]>
	</fx:Script>	

	
	
	<!-- Global Styles
	**************************************************************************************************
	-->
	<fx:Style source="styles/IOSThemeDefaults.css"/>
	<fx:Style source="styles/IOSComponentsDefaults.css"/>
	<fx:Style source="styles/iViewBlue.css"/>
	
	<!-- Global Embedded Fonts
	**************************************************************************************************
	IMPLEMETATION EXAMPLE
	
					<?xml version="1.0" encoding="utf-8"?>
					<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark" title="StylableTextField embedAsCFF=false">
						<fx:Declarations>
						
						</fx:Declarations>
						<s:VGroup width="100%" height="100%">
							<s:Label text="Label embedAsCFF=true, Regular"/>
							<s:Label text="Label embedAsCFF=true, Bold" fontWeight="bold"/>
							<s:List width="100%" height="100%">
								<s:ArrayCollection>
									<fx:String>StylableTextField embedAsCFF=false</fx:String>
									<fx:String>Comic Sans Regular</fx:String>
						
							</s:List>
						</s:VGroup>
					</s:View>
	
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		/* StyleableTextField, regular */
		@font-face {
			src: url("assets/COMIC.TTF");
			fontFamily: "comic";
			embedAsCFF: false;
		}
		
		/* StyleableTextField, bold */
		@font-face {
			src: url("assets/COMICBD.TTF");
			fontFamily: "comic";
			fontWeight: bold;
			embedAsCFF: false;
		}
		
		/* Label, regular */
		@font-face {
			src: url("assets/COMIC.TTF");
			fontFamily: "comicCFF";
			embedAsCFF: true;
		}
		
		/* Label, bold */
		@font-face {
			src: url("assets/COMICBD.TTF");
			fontFamily: "comicCFF";
			fontWeight: bold;
			embedAsCFF: true;
		}
		
		s|Label
		{
			fontFamily: "comicCFF";
		}
		
		s|ActionBar
		{
			fontFamily: "comic";
		}
		
		s|LabelItemRenderer
		{
			fontFamily: "comic";
		}
	</fx:Style>
	-->
	
	<!-- Global Declarations
	**************************************************************************************************
	
	<fx:Declarations>		
		<analytics:FlexTracker
			xmlns:analytics="com.google.analytics.components.*"
			id="trackerComponent"
			account="UA-31018068-1"
			mode="AS3"
			visualDebug="false"
			/>

		
	</fx:Declarations>	
	-->	
	
	
	<!-- Global MXML Components
	**************************************************************************************************
	-->	

	
	<!-- APP STATES
	**************************************************************************************************
	-->	
	<s:states>
		<s:State name="portrait"/>
		<s:State name="landscape"/>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>
	

	
	<!--
		Tab Panels
	**************************************************************************************************
	-->
	<s:ViewNavigator id="PipelineTabPanel" label="Pipeline" width="100%" height="100%" 	firstView="views.ies.LoginScreen"		icon="@Embed('assets/glyphs/icon-globe2@2x.png')" />
	<s:ViewNavigator id="CalendarTabPanel" label="Calendar" width="100%" height="100%"	firstView="views.tabs.CalendarTabHome"	icon="@Embed('assets/glyphs/icon-cal2.png')" />	
	<s:ViewNavigator id="SearchTabPanel"   label="Search" width="100%" height="100%"	firstView="views.tabs.SearchView" 		icon="@Embed('assets/glyphs/icon-magnify2@2x.png')" />
	<s:ViewNavigator id="ChartsTabPanel"   label="Reports" width="100%" height="100%"	firstView="views.tabs.ChartsTabHome" 	icon="@Embed('assets/glyphs/icon-chartside@2x.png')" />	
	<s:ViewNavigator id="SettingsTabPanel" label="Settings" width="100%" height="100%" 	firstView="views.tabs.SettingsView" 	icon="@Embed('assets/glyphs/icon-settings3@2x.png')" />



</s:TabbedViewNavigatorApplication>
