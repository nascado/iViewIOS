<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:renderers="renderers.*"
		xmlns:components="components.zeusbase.*"
		fontWeight="normal"
		xmlns:pipelineservice="services.pipelineservice.*"
		creationComplete="view_creationCompleteHandler(event)"
		title="In Transit">
	
	<!-- SCRIPTS
	**************************************************************************************************
	-->		
	<fx:Script>
		<![CDATA[
			
			import com.adobe.serializers.utility.TypeUtility;
			import com.zeusbase.APIKey;
			
			import mx.collections.ArrayCollection;
			import mx.core.DPIClassification;
			import mx.core.FlexGlobals;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.List;
			import spark.events.DropDownEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.FlipViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			
			import views.detail.ShipmentDetail;
			import views.tabs.PipelineTabHome;
			
	
			
			
			protected function list_creationCompleteHandler(event:FlexEvent):void
			{
				getListData();
			}
			
			protected function view_creationCompleteHandler(event:FlexEvent):void
			{
				if (Capabilities.version.indexOf("IOS") == 0)
				{
					var padding:Number = (10 * FlexGlobals.topLevelApplication.applicationDPI / DPIClassification.DPI_160);
					list.top = list.bottom = list.left = list.right = padding;
				}
			}
			
			
			public function getListData():void{
				busy.visible=true;
				GetInTransitResults.token = pipelineService.getInTransit('ShipmentView.PIPE_IN_TRANSIT','200', APIKey.getInstance().keyCode);
			}
			
			private function resultHandler(event:ResultEvent):void
			{
				trace("HTTP Service RESPONSE executed successfully");
				busy.visible=false;				
				
				var totalResults:int = GetInTransitResults.lastResult.total;
				trace("Total Results = " + totalResults);
				
				// Add message when result set is empty
				if(totalResults == 0){
					toggleShowErrorAlert(true);
				}
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				trace(event.fault.faultDetail, "Error");				
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void
			{								
				navigator.pushView(views.detail.ShipmentDetail, list.selectedItem);
			}
			
			protected function asynclistview_Browse_collectionChangeHandler(event:CollectionEvent):void
			{
				busy.visible=false;						
			}
			
			
			
			public function refresh(): void {		
				cb2.closeDropDown();
				busy.visible = true;				
				getListData();				
			}
			
			protected function toggleShowErrorAlert(isVisible:Boolean):void
			{
				if(isVisible){
					listMessageNoResults.visible = true;
				} else {
					listMessageNoResults.visible = false;
				}
			}
			
			
			
			public function sortCollection(arrayCollection : ArrayCollection, sortByField:String) : void
			{
				//Create the sort field
				var dataSortField:SortField = new SortField();
				
				//name of the field of the object on which you wish to sort the Collection
				dataSortField.name = sortByField;
				
				// set up sorting attributes
				if(sortByField == 'FileNumber'){
					dataSortField.numeric = true;	
				} else {
					//dataSortField.caseInsensitive = true;	
				}
				
				//create the sort object
				var dataSort:Sort = new Sort();
				dataSort.fields = [dataSortField];
				
				// assign the list data to sort
				arrayCollection.sort = dataSort;
				
				//refresh the collection to sort
				arrayCollection.refresh();
				busy.visible = false;
			}
			
			private function updateSort(e:Event):void {
				//setStyle('locale', list.selectedItem); 				
			}
			
			protected function sortListBy(sortByField:String):void
			{				
				cb2.closeDropDown();
				busy.visible = true;
				sortCollection(GetInTransitResults.lastResult.data, sortByField);
			}
			
			
			protected function search_changeHandler(event:TextOperationEvent):void {
				filterList(event, listSearchValue, list);
			}
			
			protected function filterList(event:TextOperationEvent, searchBox:TextInput, clientsList:List):void
			{
				var txtLength:Number = searchBox.text.length;
				var txtEntered:String = searchBox.text;
				var filteredListArray:Array = new Array();
				if(searchBox.text == "")
				{
					clientsList.dataProvider = GetInTransitResults.lastResult.data;
					return;
				}
				else
				{
					for(var i : int = 0 ; i < GetInTransitResults.lastResult.total; i++)
					{
						var client:Object = GetInTransitResults.lastResult.data.getItemAt(i);
						if(client.FileNumber.toString().substring(0, txtLength).toLowerCase() == txtEntered.toLowerCase())
						{
							filteredListArray.push(client);
						}
						clientsList.dataProvider = new ArrayCollection(filteredListArray);
					}
				}
			}

		]]>
	</fx:Script>
	
	<!-- DECLARATIONS
	**************************************************************************************************
	-->		
	<fx:Declarations>
		<s:CallResponder id="GetInTransitResults"
						 result="resultHandler(event)"
						 fault="faultHandler(event)"/>
		<pipelineservice:PipelineService id="pipelineService"/>
		
		<s:Sort id="sortbyPONumber_Quantity">
			<s:fields>
				<s:SortField name="PO_Quantity"/>
				<s:SortField name="PO_Number"/>
			</s:fields>
		</s:Sort>
	</fx:Declarations>
	
	<!-- STYLES
	**************************************************************************************************
	-->	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		.viewResultsResponseList { 
			fontSize: 12;
			fontFamily: "Helvetica";
			textDecoration: none;
			color: #2468a2;
		}
		
		@media (os-platform: "IOS")
		{
			.listFormItemRenderer
			{
				borderStyle: rounded;
				cornerRadius: 10;
			}
			
			.listForm #titleDisplay
			{
				backgroundAlpha: 0;
				color: #4C566C;
				fontFamily: "Helvetica";
				fontSize: 18;
			}
		}
		
		@media (os-platform: "IOS") and (application-dpi: 320)
		{
			.listFormItemRenderer
			{
				cornerRadius: 20;
			}
			
			.listForm #titleDisplay
			{
				fontSize: 36;
			}
		}
		
	</fx:Style>
	
	
	
	<!--
	***  STATES
	-->	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>

	
	
	<!-- NAVIGATION
	**************************************************************************************************
	-->		
	<s:actionContent>
		
		<!--  Callout Button -->
		<s:CalloutButton id="cb2" 
						 icon="@Embed('assets/glyphs/icon-share.png')"
						 label="" 
						 verticalPosition="after" 
						 calloutDestructionPolicy="never">
			
			<s:calloutContent>
				<s:BorderContainer backgroundColor="0xcccccc" color="0x004080" borderWeight="1" width="160"  cornerRadius="5">
					<s:layout>
						<s:VerticalLayout paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5" gap="5"/>
					</s:layout>
					
					<components:IESImageButton id="refreshButton" enabled="true"												   
											   imageSource="assets/buttons/DarkRefresh.png" 
											   width="144" height="46"  
											   click="Object(navigator.activeView).refresh()" 
											   />						
					<components:IESImageButton id="sortyByFileButton" enabled="true" 
											   imageSource="assets/buttons/SortByFile.png" 
											   width="144" height="46"  
											   click="Object(navigator.activeView).sortListBy('FileNumber')" 
											   />
					<components:IESImageButton id="sortyByDateButton" enabled="true" 
											   imageSource="assets/buttons/SortByDate.png" 
											   width="144" height="46"  
											   click="Object(navigator.activeView).sortListBy('ETA')" 
											   />											
					
					<s:TextInput id="listSearchValue" width="150" 
								 change="search_changeHandler(event)"
								 prompt="Search File#"
								 color="#3F3F47" fontFamily="Helvetica" fontWeight="normal" />			
					
					
				</s:BorderContainer>
			</s:calloutContent>
			
		</s:CalloutButton>
	</s:actionContent>
	<s:navigationContent>
		<s:Button icon="@Embed('assets/glyphs/icon-back@2x.png')" click="navigator.pushView(views.tabs.PipelineTabHome)"/>				
	</s:navigationContent>		
	
	
	
	<!-- Background -->
	<s:Rect left="0" right="0" height="100%" width="100%">
		<s:fill>
			<s:BitmapFill source="@Embed('assets/backgrounds/chrome.png')" fillMode="scale" />
		</s:fill>
	</s:Rect>
	
	


	
	<!-- LIST AND CONTENT
	**************************************************************************************************
	-->		
		
	<!--
	***  List
	-->
	<s:Scroller width="100%" height="100%">
		<s:Group width="100%" height="100%">
			
			<!-- Custom List with optional title skin part -->
			<s:ListForm id="list" left="0" right="0" top="0" bottom="0" width="100%" height="100%"
						change="list_changeHandler(event)"
						creationComplete="list_creationCompleteHandler(event)" 
						styleName="listForm"
						title="Total Records: {GetInTransitResults.lastResult.total} ">
				
				<s:AsyncListView collectionChange="asynclistview_Browse_collectionChangeHandler(event)"
								 list="{TypeUtility.convertToCollection(GetInTransitResults.lastResult.data)}"/>
				
				<s:itemRenderer>
					<fx:Component>
						<renderers:StyledIconItemRenderer
							styleName="listFormItemRenderer"
							messageStyleName="viewResultsResponseList"
							label="File#: {data.FileNumber}"
							messageFunction="getDetails"					
							verticalAlign="middle"
							decorator="@Embed(source='assets/buttonsweb/msg_info.png')">
							<fx:Script>
								<![CDATA[
									import assets.LoadingIcon;
									private function getDetails(item: Object): String{																							
										return "MBL: " + data.MasterNumber + " HBL: " + data.HouseNumber;									
									}
								]]>
							</fx:Script>
						</renderers:StyledIconItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>
				
				
			</s:ListForm>
			
		</s:Group>
	</s:Scroller>
	
	
	
	<!--
	** Error Message Alert
	-->					
	<s:Button id="listMessageNoResults" left="22" right="10" top="152" height="63" 
			  visible="false" 
			  label="No Results"
			  skinClass="skins.zeusbase.ErrorMessageAlertSkin"			  
			  horizontalCenter="0" verticalCenter="0" 
			  click="toggleShowErrorAlert(false)" />
	

	
	<!--
	** Animated Busy Indicator
	-->				
	<s:BusyIndicator id="busy" visible="false" width="86" height="84" horizontalCenter="0"
					 rotationInterval="50" symbolColor="#004080" verticalCenter="-65"/>

</s:View>
