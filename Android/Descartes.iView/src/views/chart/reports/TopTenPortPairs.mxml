<?xml version="1.0"?>
<!-- charts/VariableSeries.mxml -->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:chartservice="services.chartservice.*"
		xmlns:components="com.zeusbase.components.*"
		xmlns:ns1="*"
		height="600" 
		creationComplete="initApp();" 
		overlayControls="false" 
		title="Top Ports">
	
	<!-- SCRIPTS
	**************************************************************************************************
	-->
	<fx:Script><![CDATA[
		import com.zeusbase.APIKey;
		
		import mx.collections.ArrayCollection;
		
		import mx.events.FlexEvent;
		
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		
		import mx.charts.series.items.PieSeriesItem;
		import mx.charts.events.ChartItemEvent;
		import mx.charts.series.LineSeries;
		//import mx.controls.Alert;	
		
		import spark.transitions.FlipViewTransition;
		
		import views.detail.ShipmentDetail;
		import views.ies.LogoutView;
		import views.tabs.CalendarTabHome;
		
		public var flipTrans:FlipViewTransition = new FlipViewTransition();			
		
		public function initApp():void{
			
		}
		
		
		public function createDate(s:String):Date {
			// Reformat the date input to create Date objects
			// for the axis.
			var a:Array = s.split("/");
			
			// The existing String s is in the format "MM/DD/YYYY". 
			// To create a Date object, you pass "YYYY,MM,DD", 
			// where MM is zero-based, to the Date() constructor.
			var newDate:Date = new Date(a[2],a[0]-1,a[1]);
			return newDate;
		}
		
		protected function myChart_creationCompleteHandler(event:FlexEvent):void
		{
			reloadChartData(APIKey.getInstance().keyCode);
		}
		
		protected function reloadChartData(apikey:String):void
		{
			ChartCalendarSummaryResults.token = chartService.getCalendarSummary(apikey);
		}	
		
		
		private function resultHandler(event:ResultEvent):void
		{
			trace("HTTP Service RESPONSE executed successfully");
			calendarChartBusy.visible=false;			
		}
		
		private function faultHandler(event:FaultEvent):void
		{
			trace(event.fault.faultDetail, "Error");				
		}
		
		
		protected function actionButtonClicked(event:MouseEvent):void 
		{
			var duration:int = 1;
			var direction:String = 'right';			
			var mode:String = 'card';
			
			flipTrans.duration = duration*1000; 
			flipTrans.mode = mode;
			flipTrans.direction = direction;
			
			navigator.pushView(views.tabs.CalendarTabHome, null, null, flipTrans);
		}			
		
		protected function navigatorButtonClicked():void
		{
			calendarChartBusy.visible=true;
			reloadChartData(APIKey.getInstance().keyCode);
		}
		
		protected function navigatorToggleGraphsClicked(): void {
			var duration:int = 1;
			var direction:String = 'right';			
			var mode:String = 'card';
			
			flipTrans.duration = duration*1000; 
			flipTrans.mode = mode;
			flipTrans.direction = direction;
			
			navigator.pushView(views.calendar.CalendarSummaryChart_Line, null, null, flipTrans);
		}
		
		
		
		
		private function displayPiePieceData(data:Object, field:String, index:Number, percentValue:Number):String {
			var dayAndMonthOnly:String = data.EventDate.substr(5);
			//return dayAndMonthOnly + " / " + data.NumArrivals + " Arrivals";
			return data.NumArrivals + " Arrivals";
		}
		
		private function pieChart_itemClick(evt:ChartItemEvent):void {
			var psi:PieSeriesItem = evt.hitData.chartItem as PieSeriesItem;			
			//Alert.show("data=" + psi.item.@data + "\n" + "percentValue=" + psi.percentValue.toFixed(1) + "%", "label=" + psi.item.@label);
			new AlertMsg().open(this, true);
		}
		
		private function pieChart_doubleClick():void {		
			//new AlertMsg().open(this, false);
		}
		
	]]></fx:Script>
	
	
	<!-- DECLARATIONS
	**************************************************************************************************
	-->
	<fx:Declarations>
		<s:CallResponder id="ChartCalendarSummaryResults"
						 result="resultHandler(event)"
						 fault="faultHandler(event)" />
		<chartservice:ChartService id="chartService"/>
		
		<!-- This Stroke is used for the callout lines. -->
		<mx:SolidColorStroke id="callouts" weight="2" color="0x999999" alpha=".8" caps="square"/>
		
		<!-- This Stroke is used to separate the wedges in the pie. -->
		<mx:SolidColorStroke id="radial" weight="1" color="0xFFFFCC" alpha=".3"/>
		
		<!-- This Stroke is used for the outer border of the pie. -->
		<mx:SolidColorStroke id="pieborder" color="0x000000" weight="2" alpha=".5"/>
		
		<!-- Define custom colors for use as pie wedge fills. -->
		<mx:SolidColor id="sc1" color="#000066" alpha=".1"/>
		<mx:SolidColor id="sc2" color="#000066" alpha=".3"/>
		<mx:SolidColor id="sc3" color="#000066" alpha=".6"/>
		<mx:SolidColor id="sc4" color="#000066" alpha=".9"/>
		<mx:SolidColor id="sc5" color="#000066" alpha="1"/>
		<mx:SolidColor id="sc6" color="#000066" alpha="1.2"/>
		
		
		<!-- Pop Up Window Component -->		
		<fx:Component className="AlertMsg">
			<s:SkinnablePopUpContainer x="20" y="200">
				<s:TitleWindow title="Load Arrivals for this Day?" close="close()">
					<s:VGroup horizontalAlign="center" paddingTop="8" paddingBottom="8" paddingLeft="8" paddingRight="8" 
							  gap="5" width="100%">
						<s:Label id="pieAlertEventDateLabel" text="Event Date"/>
						<s:Label id="pieAlertNumArrivalsLabel" text="Nunber of Arrivals"/>
						<s:Button label="Yes" click="close()"/>
						<s:Button label="No" click="close()"/>
					</s:VGroup>
				</s:TitleWindow>
			</s:SkinnablePopUpContainer>
		</fx:Component>
		
	</fx:Declarations>
	
	
	<!-- NAV
	**************************************************************************************************
	-->
	<s:navigationContent>
		<s:Button click="actionButtonClicked(event)" 			
				  icon="@Embed('assets/glyphs/icon-back@2x.png')"/>				
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button id="chartBtn" click="navigatorButtonClicked()"
				  icon="@Embed('assets/glyphs/icon-refresh@2x.png')">
		</s:Button>
	</s:actionContent>		
	
	<!-- Background -->
	<s:Rect left="0" right="0" height="100%">
		<s:fill>
			<s:BitmapFill source="@Embed('assets/backgrounds/chrome.png')" fillMode="clip" />
		</s:fill>
	</s:Rect>
	
	
	<!-- CHART
	**************************************************************************************************
	-->
	
	<s:Label x="10" y="10" width="300" height="27" color="#2083E8" fontSize="18"
			 text="Top 10 Port Pairs" textAlign="center" verticalAlign="middle"/>
	
	<mx:PieChart id="piechart1" left="1" right="-1" top="45" bottom="25"
				 height="100%"
				 width="100%"
				 creationComplete="myChart_creationCompleteHandler(event)"
				 dataProvider="{ChartCalendarSummaryResults.lastResult.data}"
				 itemClick="pieChart_itemClick(event)" 
				 doubleClickEnabled="true" 
				 doubleClick="pieChart_doubleClick()"
				 showDataTips="false">
		
		<mx:series>
			
			<mx:PieSeries 
				id="pieSeries" 
				field="NumArrivals"
				nameField="EventDate"				
				labelPosition="callout"
				fills="{[sc1, sc2, sc3, sc4, sc5, sc6]}"
				labelFunction="displayPiePieceData">
			</mx:PieSeries>
			
			<!--
			fills="{[sc1, sc2, sc3, sc4, sc5, sc6]}"
			calloutStroke="{callouts}"
			radialStroke="{radial}"
			stroke="{pieborder}"				
			-->				
			<!-- Clear the drop shadow filters from the chart. 
			<mx:filters>
			<fx:Array/>
			</mx:filters>
			-->
		</mx:series>
	</mx:PieChart>
	
	<!--
	
	<mx:Legend left="0" top="0" width="455" height="35" dataProvider="{piechart1}"/>
	
	<ns1:CalGraphHeader left="1" top="1" width="310" height="36"/>
	-->
	
	<!-- Busy Indicator
	**************************************************************************************************
	-->
	<s:BusyIndicator id="calendarChartBusy" visible="true" width="76" height="68" horizontalCenter="0"
					 rotationInterval="50" symbolColor="#004080" verticalCenter="-65"/>		
	
	
</s:View>
